(set-info :smt-lib-version 2.6)
(set-logic QF_AUFBV)
(set-info :source |
Generated by: Alexis Terry, Mate Soos, Zoe Paraskevopoulou
Generated on: 2024-01-17
Generator: hevm
Application: hevm symbolic execution to find bugs
Target solver: CVC5
Benchmarks generated by the hevm symbolic execution tool to find bugs
in EVM bytecode. The original Solidity/YUL code can be found at
https://github.com/eth-sc-comp/benchmarks To exactly re-create these
files, run:

git clone https://github.com/eth-sc-comp/benchmarks
cd benchmarks
git checkout e8a6f2485170
nix-develop
./bench.py --tools=hevm-z3 -t 50 --dumpsmt

Note that nix-develop above will make sure to recreate the
exact conditions to be able to recreate these files, including
the exact compiler, hevm, and Z3 executable.
|)
(set-info:license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
;(PEq
;  (And
;    1
;    2
;  )
;  2
;)
;(PLT
;  (BufLength
;    (AbstractBuf "txdata")
;  )
;  18446744073709551616
;)
;(PEq
;  (WAddr
;    (SymAddr "arg1")
;  )
;  (And
;    1461501637330902918203684832716283019655932542975
;    (ReadWord
;      idx:
;        0
;      buf: 
;        (WriteByte
;          idx: 31
;          val: (IndexWord
;            idx:
;              31
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 30
;          val: (IndexWord
;            idx:
;              30
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 29
;          val: (IndexWord
;            idx:
;              29
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 28
;          val: (IndexWord
;            idx:
;              28
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 27
;          val: (IndexWord
;            idx:
;              27
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 26
;          val: (IndexWord
;            idx:
;              26
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 25
;          val: (IndexWord
;            idx:
;              25
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 24
;          val: (IndexWord
;            idx:
;              24
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 23
;          val: (IndexWord
;            idx:
;              23
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 22
;          val: (IndexWord
;            idx:
;              22
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 21
;          val: (IndexWord
;            idx:
;              21
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 20
;          val: (IndexWord
;            idx:
;              20
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 19
;          val: (IndexWord
;            idx:
;              19
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 18
;          val: (IndexWord
;            idx:
;              18
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 17
;          val: (IndexWord
;            idx:
;              17
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 16
;          val: (IndexWord
;            idx:
;              16
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 15
;          val: (IndexWord
;            idx:
;              15
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 14
;          val: (IndexWord
;            idx:
;              14
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 13
;          val: (IndexWord
;            idx:
;              13
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 12
;          val: (IndexWord
;            idx:
;              12
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 11
;          val: (IndexWord
;            idx:
;              11
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 10
;          val: (IndexWord
;            idx:
;              10
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 9
;          val: (IndexWord
;            idx:
;              9
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 8
;          val: (IndexWord
;            idx:
;              8
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 7
;          val: (IndexWord
;            idx:
;              7
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 6
;          val: (IndexWord
;            idx:
;              6
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 5
;          val: (IndexWord
;            idx:
;              5
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 4
;          val: (IndexWord
;            idx:
;              4
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 3
;          val: (IndexWord
;            idx:
;              3
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 2
;          val: (IndexWord
;            idx:
;              2
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 1
;          val: (IndexWord
;            idx:
;              1
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (WriteByte
;          idx: 0
;          val: (IndexWord
;            idx:
;              0
;            val: 
;              (WAddr
;                (SymAddr "arg1")
;              )
;          )
;        )
;        (ConcreteBuf
;          Length: 32 (0x20) bytes
;          0000:   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   ................
;          0010:   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   ................
;        )
;    )
;  )
;)
;
; logic
;(set-logic QF_AUFBV)

; types
(define-sort Byte () (_ BitVec 8))
(define-sort Word () (_ BitVec 256))
(define-sort Addr () (_ BitVec 160))
(define-sort Buf () (Array Word Byte))

; slot -> value
(define-sort Storage () (Array Word Word))

; hash functions
(declare-fun keccak (Buf) Word)
(declare-fun sha256 (Buf) Word)
(define-fun max ((a (_ BitVec 256)) (b (_ BitVec 256))) (_ BitVec 256) (ite (bvult a b) b a))

; word indexing
(define-fun indexWord31 ((w Word)) Byte ((_ extract 7 0) w))
(define-fun indexWord30 ((w Word)) Byte ((_ extract 15 8) w))
(define-fun indexWord29 ((w Word)) Byte ((_ extract 23 16) w))
(define-fun indexWord28 ((w Word)) Byte ((_ extract 31 24) w))
(define-fun indexWord27 ((w Word)) Byte ((_ extract 39 32) w))
(define-fun indexWord26 ((w Word)) Byte ((_ extract 47 40) w))
(define-fun indexWord25 ((w Word)) Byte ((_ extract 55 48) w))
(define-fun indexWord24 ((w Word)) Byte ((_ extract 63 56) w))
(define-fun indexWord23 ((w Word)) Byte ((_ extract 71 64) w))
(define-fun indexWord22 ((w Word)) Byte ((_ extract 79 72) w))
(define-fun indexWord21 ((w Word)) Byte ((_ extract 87 80) w))
(define-fun indexWord20 ((w Word)) Byte ((_ extract 95 88) w))
(define-fun indexWord19 ((w Word)) Byte ((_ extract 103 96) w))
(define-fun indexWord18 ((w Word)) Byte ((_ extract 111 104) w))
(define-fun indexWord17 ((w Word)) Byte ((_ extract 119 112) w))
(define-fun indexWord16 ((w Word)) Byte ((_ extract 127 120) w))
(define-fun indexWord15 ((w Word)) Byte ((_ extract 135 128) w))
(define-fun indexWord14 ((w Word)) Byte ((_ extract 143 136) w))
(define-fun indexWord13 ((w Word)) Byte ((_ extract 151 144) w))
(define-fun indexWord12 ((w Word)) Byte ((_ extract 159 152) w))
(define-fun indexWord11 ((w Word)) Byte ((_ extract 167 160) w))
(define-fun indexWord10 ((w Word)) Byte ((_ extract 175 168) w))
(define-fun indexWord9 ((w Word)) Byte ((_ extract 183 176) w))
(define-fun indexWord8 ((w Word)) Byte ((_ extract 191 184) w))
(define-fun indexWord7 ((w Word)) Byte ((_ extract 199 192) w))
(define-fun indexWord6 ((w Word)) Byte ((_ extract 207 200) w))
(define-fun indexWord5 ((w Word)) Byte ((_ extract 215 208) w))
(define-fun indexWord4 ((w Word)) Byte ((_ extract 223 216) w))
(define-fun indexWord3 ((w Word)) Byte ((_ extract 231 224) w))
(define-fun indexWord2 ((w Word)) Byte ((_ extract 239 232) w))
(define-fun indexWord1 ((w Word)) Byte ((_ extract 247 240) w))
(define-fun indexWord0 ((w Word)) Byte ((_ extract 255 248) w))

; symbolic word indexing
; a bitshift based version might be more performant here...
(define-fun indexWord ((idx Word) (w Word)) Byte
  (ite (bvuge idx (_ bv32 256)) (_ bv0 8)
  (ite (= idx (_ bv31 256)) (indexWord31 w)
  (ite (= idx (_ bv30 256)) (indexWord30 w)
  (ite (= idx (_ bv29 256)) (indexWord29 w)
  (ite (= idx (_ bv28 256)) (indexWord28 w)
  (ite (= idx (_ bv27 256)) (indexWord27 w)
  (ite (= idx (_ bv26 256)) (indexWord26 w)
  (ite (= idx (_ bv25 256)) (indexWord25 w)
  (ite (= idx (_ bv24 256)) (indexWord24 w)
  (ite (= idx (_ bv23 256)) (indexWord23 w)
  (ite (= idx (_ bv22 256)) (indexWord22 w)
  (ite (= idx (_ bv21 256)) (indexWord21 w)
  (ite (= idx (_ bv20 256)) (indexWord20 w)
  (ite (= idx (_ bv19 256)) (indexWord19 w)
  (ite (= idx (_ bv18 256)) (indexWord18 w)
  (ite (= idx (_ bv17 256)) (indexWord17 w)
  (ite (= idx (_ bv16 256)) (indexWord16 w)
  (ite (= idx (_ bv15 256)) (indexWord15 w)
  (ite (= idx (_ bv14 256)) (indexWord14 w)
  (ite (= idx (_ bv13 256)) (indexWord13 w)
  (ite (= idx (_ bv12 256)) (indexWord12 w)
  (ite (= idx (_ bv11 256)) (indexWord11 w)
  (ite (= idx (_ bv10 256)) (indexWord10 w)
  (ite (= idx (_ bv9 256)) (indexWord9 w)
  (ite (= idx (_ bv8 256)) (indexWord8 w)
  (ite (= idx (_ bv7 256)) (indexWord7 w)
  (ite (= idx (_ bv6 256)) (indexWord6 w)
  (ite (= idx (_ bv5 256)) (indexWord5 w)
  (ite (= idx (_ bv4 256)) (indexWord4 w)
  (ite (= idx (_ bv3 256)) (indexWord3 w)
  (ite (= idx (_ bv2 256)) (indexWord2 w)
  (ite (= idx (_ bv1 256)) (indexWord1 w)
  (indexWord0 w)
  ))))))))))))))))))))))))))))))))
)

(define-fun readWord ((idx Word) (buf Buf)) Word
  (concat
    (select buf idx)
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000001))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000002))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000003))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000004))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000005))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000006))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000007))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000008))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000009))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000a))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000b))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000c))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000d))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000e))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000f))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000010))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000011))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000012))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000013))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000014))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000015))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000016))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000017))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000018))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000019))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001a))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001b))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001c))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001d))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001e))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001f))
  )
)

(define-fun writeWord ((idx Word) (val Word) (buf Buf)) Buf
    (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store
    (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store buf
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001f) (indexWord31 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001e) (indexWord30 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001d) (indexWord29 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001c) (indexWord28 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001b) (indexWord27 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001a) (indexWord26 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000019) (indexWord25 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000018) (indexWord24 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000017) (indexWord23 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000016) (indexWord22 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000015) (indexWord21 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000014) (indexWord20 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000013) (indexWord19 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000012) (indexWord18 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000011) (indexWord17 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000010) (indexWord16 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000f) (indexWord15 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000e) (indexWord14 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000d) (indexWord13 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000c) (indexWord12 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000b) (indexWord11 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000a) (indexWord10 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000009) (indexWord9 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000008) (indexWord8 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000007) (indexWord7 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000006) (indexWord6 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000005) (indexWord5 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000004) (indexWord4 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000003) (indexWord3 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000002) (indexWord2 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000001) (indexWord1 val))
    idx (indexWord0 val))
)

; block context
(declare-fun blockhash (Word) Word)
(declare-fun codesize (Addr) Word)

; macros
(define-fun signext ( (b Word) (val Word)) Word
  (ite (= b (_ bv0  256)) ((_ sign_extend 248) ((_ extract 7    0) val))
  (ite (= b (_ bv1  256)) ((_ sign_extend 240) ((_ extract 15   0) val))
  (ite (= b (_ bv2  256)) ((_ sign_extend 232) ((_ extract 23   0) val))
  (ite (= b (_ bv3  256)) ((_ sign_extend 224) ((_ extract 31   0) val))
  (ite (= b (_ bv4  256)) ((_ sign_extend 216) ((_ extract 39   0) val))
  (ite (= b (_ bv5  256)) ((_ sign_extend 208) ((_ extract 47   0) val))
  (ite (= b (_ bv6  256)) ((_ sign_extend 200) ((_ extract 55   0) val))
  (ite (= b (_ bv7  256)) ((_ sign_extend 192) ((_ extract 63   0) val))
  (ite (= b (_ bv8  256)) ((_ sign_extend 184) ((_ extract 71   0) val))
  (ite (= b (_ bv9  256)) ((_ sign_extend 176) ((_ extract 79   0) val))
  (ite (= b (_ bv10 256)) ((_ sign_extend 168) ((_ extract 87   0) val))
  (ite (= b (_ bv11 256)) ((_ sign_extend 160) ((_ extract 95   0) val))
  (ite (= b (_ bv12 256)) ((_ sign_extend 152) ((_ extract 103  0) val))
  (ite (= b (_ bv13 256)) ((_ sign_extend 144) ((_ extract 111  0) val))
  (ite (= b (_ bv14 256)) ((_ sign_extend 136) ((_ extract 119  0) val))
  (ite (= b (_ bv15 256)) ((_ sign_extend 128) ((_ extract 127  0) val))
  (ite (= b (_ bv16 256)) ((_ sign_extend 120) ((_ extract 135  0) val))
  (ite (= b (_ bv17 256)) ((_ sign_extend 112) ((_ extract 143  0) val))
  (ite (= b (_ bv18 256)) ((_ sign_extend 104) ((_ extract 151  0) val))
  (ite (= b (_ bv19 256)) ((_ sign_extend 96 ) ((_ extract 159  0) val))
  (ite (= b (_ bv20 256)) ((_ sign_extend 88 ) ((_ extract 167  0) val))
  (ite (= b (_ bv21 256)) ((_ sign_extend 80 ) ((_ extract 175  0) val))
  (ite (= b (_ bv22 256)) ((_ sign_extend 72 ) ((_ extract 183  0) val))
  (ite (= b (_ bv23 256)) ((_ sign_extend 64 ) ((_ extract 191  0) val))
  (ite (= b (_ bv24 256)) ((_ sign_extend 56 ) ((_ extract 199  0) val))
  (ite (= b (_ bv25 256)) ((_ sign_extend 48 ) ((_ extract 207  0) val))
  (ite (= b (_ bv26 256)) ((_ sign_extend 40 ) ((_ extract 215  0) val))
  (ite (= b (_ bv27 256)) ((_ sign_extend 32 ) ((_ extract 223  0) val))
  (ite (= b (_ bv28 256)) ((_ sign_extend 24 ) ((_ extract 231  0) val))
  (ite (= b (_ bv29 256)) ((_ sign_extend 16 ) ((_ extract 239  0) val))
  (ite (= b (_ bv30 256)) ((_ sign_extend 8  ) ((_ extract 247  0) val)) val))))))))))))))))))))))))))))))))

; abstract base stores

; symbolic addresseses
(declare-const symaddr_arg1 Addr)

; buffers
(declare-const txdata (Array (_ BitVec 256) (_ BitVec 8)))
; buffer lengths
(declare-const txdata_length (_ BitVec 256))

; variables

; frame context

; block context

; intermediate buffers & stores
(define-fun buf0() Buf (store ((as const Buf) #b00000000) (_ bv0 256) (indexWord0 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf0_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf1() Buf (store buf0 (_ bv1 256) (indexWord1 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf1_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf2() Buf (store buf1 (_ bv2 256) (indexWord2 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf2_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf3() Buf (store buf2 (_ bv3 256) (indexWord3 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf3_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf4() Buf (store buf3 (_ bv4 256) (indexWord4 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf4_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf5() Buf (store buf4 (_ bv5 256) (indexWord5 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf5_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf6() Buf (store buf5 (_ bv6 256) (indexWord6 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf6_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf7() Buf (store buf6 (_ bv7 256) (indexWord7 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf7_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf8() Buf (store buf7 (_ bv8 256) (indexWord8 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf8_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf9() Buf (store buf8 (_ bv9 256) (indexWord9 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf9_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf10() Buf (store buf9 (_ bv10 256) (indexWord10 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf10_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf11() Buf (store buf10 (_ bv11 256) (indexWord11 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf11_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf12() Buf (store buf11 (_ bv12 256) (indexWord12 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf12_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf13() Buf (store buf12 (_ bv13 256) (indexWord13 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf13_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf14() Buf (store buf13 (_ bv14 256) (indexWord14 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf14_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf15() Buf (store buf14 (_ bv15 256) (indexWord15 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf15_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf16() Buf (store buf15 (_ bv16 256) (indexWord16 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf16_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf17() Buf (store buf16 (_ bv17 256) (indexWord17 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf17_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf18() Buf (store buf17 (_ bv18 256) (indexWord18 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf18_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf19() Buf (store buf18 (_ bv19 256) (indexWord19 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf19_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf20() Buf (store buf19 (_ bv20 256) (indexWord20 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf20_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf21() Buf (store buf20 (_ bv21 256) (indexWord21 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf21_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf22() Buf (store buf21 (_ bv22 256) (indexWord22 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf22_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf23() Buf (store buf22 (_ bv23 256) (indexWord23 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf23_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf24() Buf (store buf23 (_ bv24 256) (indexWord24 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf24_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf25() Buf (store buf24 (_ bv25 256) (indexWord25 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf25_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf26() Buf (store buf25 (_ bv26 256) (indexWord26 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf26_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf27() Buf (store buf26 (_ bv27 256) (indexWord27 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf27_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf28() Buf (store buf27 (_ bv28 256) (indexWord28 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf28_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf29() Buf (store buf28 (_ bv29 256) (indexWord29 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf29_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf30() Buf (store buf29 (_ bv30 256) (indexWord30 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf30_length () (_ BitVec 256) (_ bv32 256))
(define-fun buf31() Buf (store buf30 (_ bv31 256) (indexWord31 (concat (_ bv0 96) symaddr_arg1 ))))

(define-fun buf31_length () (_ BitVec 256) (_ bv32 256))


; keccak assumptions
; keccak computations
; read assumptions

(assert (= (bvand (_ bv1 256) (_ bv2 256)) (_ bv2 256)))
(assert (bvult txdata_length (_ bv18446744073709551616 256)))
(assert (= (concat (_ bv0 96) symaddr_arg1 ) (bvand (_ bv1461501637330902918203684832716283019655932542975 256) (readWord (_ bv0 256) buf31))))


(check-sat)
(exit)
